name: Docker

on:
  push:
    branches:
      - master
  pull_request:

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tag:
    name: Create image tag
    runs-on: ubuntu-latest
    outputs:
      subject: ${{ steps.image_tag.outputs.subject }}
      tag: ${{ steps.image_tag.outputs.tag }}
    steps:
      - name: Create image tag
        id: image_tag
        shell: bash
        env:
          REPOSITORY: ${{ github.repository }}
          REF_NAME: ${{ (github.event_name == 'pull_request' && format('pull-{0}', github.event.pull_request.number)) || github.ref_name }}
          COMMIT: ${{ github.sha }}
        run: |
          set -euo pipefail
          TAG="$(echo -n "dev-$REF_NAME-$COMMIT" | tr '[:upper:]' '[:lower:]' | tr -d '[:blank:]' | tr -c '[:alnum:]' '-')"
          echo "image tag: $TAG"
          echo "subject=ghcr.io/$REPOSITORY" >> "$GITHUB_OUTPUT"
          echo "tag=ghcr.io/$REPOSITORY:$TAG" >> "$GITHUB_OUTPUT"

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-24.04
            arch: amd64
          - runs-on: ubuntu-24.04-arm
            arch: arm64

    needs: tag
    name: Build image for ${{ matrix.arch }}
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read # required to read the repository contents
      packages: write # required to push the built image to the package registry
      attestations: write # required to create attestations for the built image
      id-token: write # required to create attestations for the built image
      pull-requests: write # required to comment on the pull request
    steps:
      - name: Log into GHCR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTOR: ${{ github.actor }}
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$ACTOR" --password-stdin

      - name: docker build
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_STEP_LOG_MAX_SIZE: -1
          BUILDKIT_STEP_LOG_MAX_SPEED: -1
          TAG: ${{ needs.tag.outputs.tag }}-${{ matrix.arch }}
        run: docker build . -t "$TAG"
      - name: docker push
        env:
          TAG: ${{ needs.tag.outputs.tag }}-${{ matrix.arch }}
        run: docker push "$TAG"
      - name: Get digest
        id: digest
        env:
          TAG: ${{ needs.tag.outputs.tag }}-${{ matrix.arch }}
        run: |
          set -euo pipefail
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$TAG" | cut -d@ -f2)
          echo "Digest: $DIGEST"
          echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
      - uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ needs.tag.outputs.subject }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

  manifest:
    needs: [tag, build]
    name: Create manifests
    runs-on: ubuntu-latest
    permissions:
      packages: write # required to create the manifest list in the package registry
      id-token: write # required to create the manifest list in the package registry
      pull-requests: write # required to comment on the pull request
    steps:
      - name: Log into GHCR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTOR: ${{ github.actor }}
        run: echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$ACTOR" --password-stdin
      - name: Create and push manifest
        env:
          TAG: ${{ needs.tag.outputs.tag }}
        run: |
          set -euo pipefail
          docker manifest create "$TAG" "$TAG"-amd64 "$TAG"-arm64
          docker manifest push "$TAG"
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@b8f338c590a895d50bcbfa6c5859251edc8952fc # v2
        continue-on-error: true # just check the actions log if ratelimits or whatever
        with:
          message: |
            :whale: Docker image built and pushed to GitHub Container Registry.

            You can pull it using:

            ```bash
            docker pull ${{ needs.tag.outputs.tag }}
            ```

            > [!WARNING]
            > This is a development image and should not be used in production.
            > It will be automatically removed after 2 weeks.
