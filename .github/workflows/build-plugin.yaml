name: Build plugin

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        target:
          - linux-x64-glibc
          - darwin-x64-unknown
          - win32-x64-unknown

    name: Build plugin for ${{ matrix.target }}
    runs-on: ubuntu-latest
    permissions:
      contents: read # clone the repository
      id-token: write # required to read secrets
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - run: yarn install --frozen-lockfile
      - run: yarn run build

      - name: Package
        run: ./scripts/package_target.sh ${{ matrix.target }} false plugin-${{ matrix.target }}/

      - name: Acquire Grafana API key
        id: grafana_api_key
        uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets/v1
        with:
          repo_secrets: |
            GRAFANA_ACCESS_POLICY_TOKEN=gcom-token:token
      - name: Sign package
        run: yarn sign-plugin --distDir ./dist/plugin-${{ matrix.target }}/

      - name: Create ZIP
        working-directory: dist/
        run: zip -yqr plugin-${{ matrix.target }}.zip plugin-${{ matrix.target }}/
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.target }}.zip
          path: dist/plugin-${{ matrix.target }}.zip

  generate:
    needs: build
    name: Generate plugin metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read # clone the repository
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/
          pattern: plugin-*.zip

      # FIXME: Why do we use MD5?? Why not SHA-2/SHA-512?
      - name: Generate MD5 sums
        run: ./scripts/generate_md5sum.sh artifacts/
      - name: Create Gcom API plugin JSON payload
        env:
          COMMIT: ${{ github.sha }}
          BASE_URL: https://github.com/${{ github.repository }}
        run: |
          set -euo pipefail
          cat artifacts/md5sums.txt | jq --slurp --raw-input \
            --arg commit "$COMMIT" \
            --arg baseUrl "$BASE_URL" \
            'split("\n")[:-1]
            | map(split("  "))
            | map({
                (
                  .[1]
                  | sub("^artifacts/"; "")
                  | sub(".zip$"; "")
                  | sub("plugin-"; "")
                  | sub("win32"; "windows")
                  | sub("x64"; "amd64")
                  | sub("-unknown"; "")
                  | sub("-glibc"; "")
                ): .[0]
              })
            | add
            | { commit: $commit, url: $baseUrl, download: .}' | tee gcom.json
      - name: Upload generated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-artifacts
          path: |
            gcom.json
            artifacts/md5sums.txt

  release:
    needs: [build, generate]
    if: github.event_name == 'push' && github.ref_type == 'tag'
    name: Release plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write # create a release
      id-token: write # required to read secrets
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/
          pattern: plugin-*.zip

      - uses: actions/download-artifact@v4
        with:
          name: generated-artifacts

      - name: Acquire Grafana API key
        id: grafana_api_key
        uses: grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets/v1
        with:
          repo_secrets: |
            GRAFANA_ACCESS_POLICY_TOKEN=gcom-token:token

      - uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        id: release
        with:
          files: |
            artifacts/*.zip
            artifacts/md5sums.txt
          fail_on_unmatched_files: true
          make_latest: 'true'
          generate_release_notes: true
      - name: Add download URLs to gcom.json
        env:
          ASSETS: ${{ steps.release.outputs.assets }}
        run: |
          set -euo pipefail
          # ASSETS is a JSON array of objects: {name, browser_download_url}
          # We want to modify gcom.json to have a `$.download` field which has the structure:
          # {"existing-key-here": {"md5": "existing value from previous file", "url": "browser_download_url"}}
          # where the `name` is used to map from `plugin-linux-x64-glibc.zip` to `linux-amd64`, etc.
          jq --argjson assets "$ASSETS" '
            .download as $old
            | .download = (
                $assets
                | map(
                    . as $a
                    | (
                        $a.name
                        | sub("^plugin-"; "")
                        | sub("-unknown"; "")
                        | sub("-glibc"; "")
                        | sub("win32"; "windows")
                        | sub("x64"; "amd64")
                        | sub(".zip$"; "")
                      ) as $key
                    | select($old[$key])
                    | { ($key): { md5: $old[$key], url: $a.browser_download_url } }
                  )
                | add
              )
          ' gcom.json | tee with-urls.json

      - name: Publish to grafana.com
        run: |
          set -euo pipefail
          curl --silent --show-error \
            --header 'User-Agent: grafana-image-renderer:/plugins/publish' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer '"$GRAFANA_ACCESS_POLICY_TOKEN" \
            --request POST \
            --data @with-urls.json \
            --location \
            https://grafana.com/api/plugins
