import * as promClient from 'prom-client';
import * as jwt from 'jsonwebtoken';
import * as fs from 'fs';
import { ConsoleLogger } from '../../logger';
import { Browser } from '../../browser/browser';

const renderingConfig = {
  args: ['--no-sandbox', '--disable-gpu', '--disable-extensions'],
  ignoresHttpsErrors: false,
  width: 500,
  height: 300,
  deviceScaleFactor: 1,
  maxWidth: 1000,
  maxHeight: 500,
  maxDeviceScaleFactor: 2,
  pageZoomLevel: 1,
  mode: 'default',
  clustering: {
    monitor: false,
    mode: 'browser',
    maxConcurrency: 5,
    timeout: 30,
  },
  verboseLogging: true,
  dumpio: true,
  timingMetrics: false,
  emulateNetworkConditions: false,
  // headed: true,
};

const browser = new Browser(
  renderingConfig,
  new ConsoleLogger({
    level: 'debug',
    console: {
      colorize: true,
      json: true,
      level: 'debug',
    },
  }),
  {
    durationHistogram: new promClient.Histogram({
      name: 'grafana_image_renderer_step_duration_seconds',
      help: 'duration histogram of browser steps for rendering an image labeled with: step',
      labelNames: ['step'],
      buckets: [0.1, 0.3, 0.5, 1, 3, 5, 10, 20, 30],
    }),
  }
);

const dashboardUid = 'd10881ec-0d35-4909-8de7-6ab563a9ab29';
const panelIds = {
  graph: 1,
  table: 2,
  error: 3,
  slow: 4,
};
const grafanaEndpoint = 'http://localhost:3000/d-solo';
const renderKey = jwt.sign(
  {
    renderUser: {
      org_id: 1,
      user_id: 1,
      org_role: 'Admin',
    },
  },
  '-',
  { algorithm: 'HS512' }
);

const goldenFilesFolder = './src/test/integrations/testdata';

process.env['PUPPETEER_DISABLE_HEADLESS_WARNING'] = 'true';

test('render should take a screenshot of a simple graph panel', async () => {
  await browser.render({
    url: `${grafanaEndpoint}/${dashboardUid}?panelId=${panelIds.graph}&render=1&from=1698385036999&to=1698406636999`,
    filePath: 'graph.png',
    timeout: 5,
    renderKey: renderKey,
    domain: 'localhost',
    width: 500,
    height: 300,
    deviceScaleFactor: 1,
  });

  expect(fs.readFileSync('graph.png')).toEqual(fs.readFileSync(goldenFilesFolder + '/graph.png'));
});

test('render should take a screenshot of a simple table panel', async () => {
  await browser.render({
    url: `${grafanaEndpoint}/${dashboardUid}?panelId=${panelIds.table}&render=1&from=1698385036999&to=1698406636999`,
    filePath: 'table.png',
    timeout: 5,
    renderKey: renderKey,
    domain: 'localhost',
    width: 500,
    height: 300,
    deviceScaleFactor: 1,
  });

  expect(fs.readFileSync('table.png')).toEqual(fs.readFileSync(goldenFilesFolder + '/table.png'));
});

test('render should take a screenshot of an error panel', async () => {
  await browser.render({
    url: `${grafanaEndpoint}/${dashboardUid}?panelId=${panelIds.error}&render=1&from=1698385036999&to=1698406636999`,
    filePath: 'error.png',
    timeout: 5,
    renderKey: renderKey,
    domain: 'localhost',
    width: 500,
    height: 300,
    deviceScaleFactor: 1,
  });

  expect(fs.readFileSync('error.png')).toEqual(fs.readFileSync(goldenFilesFolder + '/error.png'));
});

test('render should take a screenshot of a slow graph panel', async () => {
  const fn = async () => {
    await browser.render({
      url: `${grafanaEndpoint}/${dashboardUid}?panelId=${panelIds.slow}&render=1&from=1698385036999&to=1698406636999`,
      filePath: 'slow.png',
      timeout: 5,
      renderKey: renderKey,
      domain: 'localhost',
      width: 500,
      height: 300,
      deviceScaleFactor: 1,
    });
  };

  expect(fs.readFileSync('slow.png')).toEqual(fs.readFileSync(goldenFilesFolder + '/slow.png'));
});
